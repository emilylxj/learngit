./configure   --prefix=/pkg/netcdf/4.3.2/$PRG_ENV  CPPFLAGS='-I/pkg/zlib/include -I/pkg/Hdf5/1.8.10/${PRG_ENV}/include' LDFLAGS=-L//pkg/zlib/lib -L/pkg/Hdf5/1.8.10/${COMPILER} /lib  --enable-shared  >&configure.log 

CPPFLAGS='-I/pkg/zlib/include -I/pkg/Hdf5/1.8.10/${PRG_ENV}/include' LDFLAGS='-L//pkg/zlib/lib -L/pkg/Hdf5/1.8.10/${PRG_ENV:q:q
}/lib' ./configure   --prefix=/pkg/netcdf/4.3.2/$PRG_ENV --enable-shared  >&configure.log &

CPPFLAGS='-I/pkg/zlib/include -I/pkg/hdf5/1.8.10/'${PRG_ENV}'/include' LDFLAGS='-L//pkg/zlib/lib -L/pkg/hdf5/1.8.10/'${PRG_ENV}'/lib' ./configure   --prefix=/pkg/netcdf/4.1.3/$PRG_ENV --enable-shared --enable-cxx-4 --enable-fortran --enable-cxx  --enable-static --enable-netcdf-4   --disable-dap >&configure1.log &

make check install >&make.log &

make -j 8 >& make.log &

#make check  >& maketest.log &
make  install>& makeinstall.log &

Reading and writing data in MDSplus trees in Matlab

Data access from Matlab is very similar to IDL, and we shall briefly revise the above examples in the Matlab environment.
Observe first that the matlab interface is not directly created by the make procedure of MDSplus. The following steps for the installation are required within Matlab:

    Include the path of the MDSplus-Matlab interface directory in the search path list of Matlab. In Matlab 6 and following, this requires selecting option File->Set Path... and then adding the directory containing the MDSplus interfaces files in the Set Path form. On windows such directory is usually \Program Files\mdsplus\matlab, while on Unix is usually /usr/local/mdsplus/matlab;
    Make sure that environment variable MDSPLUS_DIR is defined as the root directory of the MDSplus distribution (e.g. /usr/local/mdsplus);
    Set default in the matlab directory of MDSplus: cd <mdsplus_root>/matlab
    Launch the install procedure: shared=1; make_mdsipmex 

Installation is done only once. Afterwards it is necessary to make sure that the path for MDSplus is included in the search path list of Matlab.

In Matlab we need always a connect command first, like the following:

>> mdsconnect('150.178.3.101:8000')

You may wonder whether it is possible to access local data in Matlab. This is possible: it suffices to start a mdsip server on the local machine, say on port 8000, and issue the command:

>> mdsconnect('localhost')

Recall that if you are using Windows you can start mdsip as a service, so that it is always active.

The following commands read the Y and X axis of node :SIGNAL1 into Matlab variables y and x.

>> mdsopen('my_tree', -1)
>> [y,status] = mdsvalue(':SIGNAL1')
>> [x,status] = mdsvalue('DIM_OF(:SIGNAL1)')

Note that the function returns both the result of the evaluation of the passed TDI expression and an integer variable containing the status for the operation (assumed to be successful if odd).

In the following example an array is written into node :NUM1

>> a=sin((0:100)/10.)
>> mdsput(':NUM2', '$1', a)

And finally, let's write a sinusoidal waveform in :SIGNAL1

>> x = (0:1000)/50.
>> y = sin(x)
>> mdsput(':signal1','BUILD_SIGNAL($1,,$2)',y,x)


http://www.mdsplus.org/index.php?title=Documentation:Tutorial:DataAccess&open=25829909300412406038513&page=Documentation%2FThe+MDSplus+tutorial%2FAccessing+MDSplus+data+in+Fortran%2C+IDL%2C+MATLAB+and+C+%28old+style%29
