#!/bin/bash
#set -x
#Created by jlchen 05/03/2016 
#Update to create pbsMonitor_id_${job_id_num} for other processes to get information

usageStr="
# Question to jlchen chen@ipp.ac.cn

usage: 
      pbsMonitor [templatePBS] [-jq queuename, batch or parallel11 or parallel01] [-cn coreNum] [-jn jobNode] [-pn pbsName] [-wt walltime] [-cht checktime(e.g.,)] [-exe  cmdName cmdOptions ...]
example:

pbsMonitor -cn 16 -pn myGenray -exe genray_cfetr -np 16

pbsMonitor -cn 16 -exe onetwo_cfetr -np 16

pbsMonitor -cn 18 -pn myTGYRO -exe tgyro_cfetr -e . -n 18
#Make sure -cn value is the same as -n value and that in input.tgyro

"

checkTime=1m
sleepTime=1s
if [ -z $1 ]; then
  echo "${usageStr}"
  exit 1
fi

tmp=$1
if [[ "${tmp:0:1}" != "-" ]]; then
  templatePBS=$1; shift;
else
  templatePBS=
fi

while [ $# -gt 0 ] ; do
  #echo "case var: $(echo "$1" |tr '[A-Z]' '[a-z]' )"
  case $(echo "$1" |tr '[A-Z]' '[a-z]' ) in 
  -exe|-cmd) shift; break 1 ;;
  -jq|-jobque) shift ; jobQue=$1 ;;
  -cn|-corenum) shift ; coreNum=$1 ;;
  -jn|-jobnode) shift ; jobNode=$1 ;;
  -pn|-pbsname) shift ; pbsName=$1 ;;
  -wt|-walltime) shift ; wallTime=$1 ;;
  -cht|-checktime) shift ; checkTime=$1 ;;
  *) echo "$1 is not a flag option which should start with '-' !! "; 
     echo
     echo "${usageStr}"
     exit 1 ;; 
  esac
  shift
done
cmd=
cmd="$@"




if [ -z ${templatePBS} ]; then
  if [ ! -z "${cmd}" ]; then
    pbsName_0=($cmd)
    pbsName_0=$pbsName_0
    jobNode_0=1
    coreNum_0=1
    jobQue_0="batch"
    templatePBS='tmpPBS.pbs'
    echo "Create pbs for cmd: ${cmd}"
    echo "
#PBS -N ${pbsName_0}
#PBS -l nodes=${jobNode_0}:ppn=${coreNum_0}
#PBS -j oe
#PBS -l walltime=24:00:00
#PBS -q ${jobQue_0}

export NPROCS=\`wc -l \${PBS_NODEFILE} |gawk '//{print \$1}'\`

echo The master node of this job is \`hostname\`
echo The working directory is \`echo \${PBS_O_WORKDIR}\`
echo The node file is \${PBS_NODEFILE}
echo '=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'
echo This job runs on the following nodes:
echo \`cat \${PBS_NODEFILE}\`
echo '=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'
echo This job has allocated \${NPROCS} nodes


echo '=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'

cd \${PBS_O_WORKDIR}
pwd
NP=\`cat \$\{PBS_NODEFILE\}|wc -l\`

JOBID_FILE=\"JOBID_\${PBS_JOBID}\"
touch \${JOBID_FILE}

cmd=\"${cmd}\"
echo \"Run: \${cmd}\"
\${cmd}

rm \${JOBID_FILE}
" > ${templatePBS}
  else
    echo "Neither templatePBS nor cmd is provided. Type again!"
    echo ${usageStr}
  fi
fi

subPBS=subbedPBS.pbs
cp ${templatePBS} ${subPBS}
if [ ! -z ${pbsName} ]; then
  sed -r s/"#PBS -N .*"/"#PBS -N ${pbsName}"/ -- ${subPBS} > tmp.txt && mv tmp.txt   ${subPBS}
fi
if [ ! -z ${coreNum} ]; then  
  sed -r s/"#PBS -l nodes=.*"/"#PBS -l nodes=${jobNode:-1}:ppn=${coreNum}"/ -- ${subPBS} > tmp.txt && mv tmp.txt   ${subPBS}
fi
if [ ! -z ${jobQue} ]; then
  sed -r s/"PBS -q .*"/"PBS -q ${jobQue}"/ -- ${subPBS} > tmp.txt && mv tmp.txt   ${subPBS}
fi
if [ ! -z "${wallTime}" ]; then
  sed -r s/"PBS -l walltime=.*"/"PBS -l walltime=${wallTime}"/ -- ${subPBS} > tmp.txt && mv tmp.txt   ${subPBS}
fi
if [ ! -z "${cmd}" ]; then
  sed -r s:'^cmd=.*':"cmd='${cmd} '": -- ${subPBS} > tmp.txt && mv tmp.txt   ${subPBS}
fi
echo ${cmd}


## change checkTime to seconds
#checkSec=10
case ${checkTime: -1} in
    d|day|days)  checkSec=$(( ${checkTime:0:$((${#checkTime}-1))}*86400 ));;
    h|hour|hours) checkSec=$(( ${checkTime:0:$((${#checkTime}-1))}*3600 ));;
    m|min|minute|mins|minutes) checkSec=$(( ${checkTime:0:$((${#checkTime}-1))}*60 ));;
    s|sec|second|secs|seconds) checkSec=$(( ${checkTime:0:$((${#checkTime}-1))}*1 ));;
esac
#echo checkSec=${checkSec}
## sub jobs

pbsID=$(qsub $subPBS)

if [ ! -z "${pbsID}" ]; then
  job_id_num=${pbsID/.*/}
  echo $pbsID
  echo ${pbsID/.*/}
  echo pbsMonitor_id_${job_id_num}
  touch "pbsMonitor_id_${job_id_num}"
  echo "The job $pbsID (named as $pbsName) is submitted..."
  echo "cmd: ${cmd}"
  time0=$(date +%s)
  timeStart=${time0}
  tt=$(qstat | grep "$pbsID")
  while [ ${#tt} -gt 0 ] ; do
    sleep $sleepTime
    tt=$(qstat | grep "$pbsID")
    if [ ${#tt} -gt 0 ]; then
      if [[ $(date +%s) -gt $((${checkSec}+${time0})) ]]; then
        
        runTimeSecs=$(($(date +%s)-${timeStart}))
        runTimeSec=$(( ${runTimeSecs} % 60 ))
        runTimeMin=$(( $(( ${runTimeSecs} % 3600 )) /60 ))
        runTimeHour=$(( $(( ${runTimeSecs} % 86400 )) /3600 ))
        runTimeDay=$(( ${runTimeSecs} / 86400 )) 
        runTime=${runTimeDay}d${runTimeHour}h${runTimeMin}m${runTimeSec}s
        if [[ ${runTimeDay} -eq 0 ]]; then
          runTime=${runTimeHour}h${runTimeMin}m${runTimeSec}s
          if [[ ${runTimeHour} -eq 0 ]]; then
            runTime=${runTimeMin}m${runTimeSec}s
            if [[ ${runTimeMin} -eq 0 ]]; then
              runTime=${runTimeSec}s
            fi
          fi
        fi
        echo "$pbsID" "(named as $pbsName) has been running over ${runTime}. Check in about ${checkTime} (s:second, m:minute, h:hour)."
        time0=$(date +%s)
      fi
    fi
  done
  #get project name
  nameStr=$(sed -r -n /"#PBS -N .*"/p -- ${subPBS})
  pname=${nameStr#*#PBS -N }
  pnum=${pbsID%.*}
  if [ -f "pbs_run_log" ] ; then rm pbs_run_log ; fi
  if [ -f "${pname}.o${pnum}" ] ; then ln -s ${pname}.o${pnum} pbs_run_log ; fi
  echo "The job $pbsID is completed!"
  if [ -f "pbsMonitor_id_${job_id_num}" ]; then rm  "pbsMonitor_id_${job_id_num}"; fi
else
  echo -e "\e[31m!!Job ID is empty!!\e[0m"
  exit 1
fi


